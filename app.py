import streamlit as st
import json
from openai import OpenAI
from io import BytesIO

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Nebius
client = OpenAI(
    base_url="https://api.studio.nebius.com/v1/",
    api_key=st.secrets["NEBIUS_API_KEY"]
)

# ======= –°–∏—Å—Ç–µ–º–Ω—ã–π JSON-–ø—Ä–æ–º—Ç =======
SYSTEM_PROMPT = {
    "task": "format_announcement_hse_card",
    "description": "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML-–±–ª–æ–∫ –≤ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ –ù–ò–£ –í–®–≠.",
    "instructions": {
        "steps": [
            "1. –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –ø–æ–ª—è input_text.",
            "2. –†–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏.",
            "3. –°–æ–∫—Ä–∞—Ç–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã, —Å–¥–µ–ª–∞—Ç—å —á–∏—Ç–∞–µ–º–æ.",
            "4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –í–®–≠.",
            "5. –í–µ—Ä–Ω—É—Ç—å JSON —Å –ø–æ–ª—è–º–∏ {type: 'HTML', content: '<div>...</div>'}."
        ]
    },
    "style_guidelines": {
        "font_family": "'Inter', 'Segoe UI', Roboto, Arial, sans-serif",
        "primary_color": "#00256c",
        "secondary_color": "#e5ebf8",
        "accent_color": "#16a34a",
        "border_radius": "16px",
        "shadow": "0 4px 14px rgba(0,0,0,0.08)",
        "max_width": "860px",
        "include_logo": True
    },
    "output_format": "HTML"
}

# ======= –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit =======
st.set_page_config(page_title="HSE HTML Generator", page_icon="üéì", layout="wide")
st.title("üéì –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –ù–ò–£ –í–®–≠")
st.caption("–°–æ–∑–¥–∞—ë—Ç HTML-–∫–∞—Ä—Ç–æ—á–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ –í–®–≠ —á–µ—Ä–µ–∑ Nebius API")

user_text = st.text_area(
    "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
    height=250,
    placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏..."
)

if st.button("‚ú® –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å HTML"):
    if not user_text.strip():
        st.warning("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
    else:
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ Qwen3-235B..."):
            try:
                payload = SYSTEM_PROMPT.copy()
                payload["input_text"] = user_text

                response = client.chat.completions.create(
                    model="Qwen/Qwen3-235B-A22B-Thinking-2507",
                    response_format={"type": "json_object"},
                    messages=[
                        {"role": "system", "content": json.dumps(payload, ensure_ascii=False)},
                        {"role": "user", "content": [{"type": "text", "text": user_text}]}
                    ],
                )

                raw_content = response.choices[0].message.content.strip()
                parsed = json.loads(raw_content)

                # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ {type: "HTML", content: "<div>...</div>"}
                html_code = parsed.get("content") if isinstance(parsed, dict) and "content" in parsed else raw_content

                st.success("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

                # === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ HTML-–∫–æ–¥–∞ ===
                st.subheader("üìÑ HTML-–∫–æ–¥")
                st.code(html_code, language="html")

                # === –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ===
                html_bytes = BytesIO(html_code.encode("utf-8"))
                st.download_button(
                    label="üíæ –°–∫–∞—á–∞—Ç—å HTML-—Ñ–∞–π–ª",
                    data=html_bytes,
                    file_name="hse_card.html",
                    mime="text/html"
                )

                # === –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä ===
                st.subheader("üåê –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
                st.components.v1.html(html_code, height=1000, scrolling=True)

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
else:
    st.info("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ú® –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å HTML¬ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É.")
